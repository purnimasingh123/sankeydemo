{"version":3,"sources":["chartDemo.js","App.js","serviceWorker.js","index.js"],"names":["sankey","Highcharts","ChartExample","chart","title","text","credits","enabled","accessibility","point","valueDescriptionFormat","series","keys","data","type","name","id","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAGAA,GAAOC,K,IAuFQC,E,4LAlFPD,IAAWE,MAAM,YAAa,CAE1BC,MAAO,CACHC,KAAM,qCAEVC,QAAS,CACLC,SAAS,GAEbC,cAAe,CACXC,MAAO,CACHC,uBAAwB,yDAGhCC,OAAQ,CAAC,CACLC,KAAM,CAAC,OAAQ,KAAM,UACrBC,KAAM,CACF,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,KAClC,CAAC,YAAa,mBAAoB,MAClC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,mBAAoB,KACzC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,MAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,KAChC,CAAC,mBAAoB,UAAW,MAGpCC,KAAM,SACNC,KAAM,2B,+BAMd,OACI,6BACI,yBAAKC,GAAG,mB,GA3EGC,a,MCOZC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d657c9db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport sankey from 'highcharts/modules/sankey.js';\nsankey(Highcharts);\n\nclass ChartExample extends Component {\n    componentDidMount() {\n        //Main chart Component\n        Highcharts.chart('container', {\n\n            title: {\n                text: 'High-Level Flow Of Sorting Center'\n            },\n            credits: {\n                enabled: false\n              },\n            accessibility: {\n                point: {\n                    valueDescriptionFormat: '{index}. {point.from} to {point.to}, {point.weight}.'\n                }\n            },\n            series: [{\n                keys: ['from', 'to', 'weight'],\n                data: [\n                    ['Unloader1', 'Sorting Machine1', 5000],\n                    ['Unloader1', 'Sorting Machine2', 1000],\n                    ['Unloader1', 'Sorting Machine3', 1000],\n                    ['Unloader1', 'Sorting Machine4', 1000],\n                    ['Unloader2', 'Sorting Machine1', 1000],\n                    ['Unloader2', 'Sorting Machine3', 5000],\n                    ['Unloader2', 'Sorting Machine4', 1000],\n                    ['Unloader3', 'Sorting Machine4', 1000],\n                    ['Unloader3', 'Sorting Machine2', 1000],\n                    ['Unloader3', 'Sorting Machine1', 5000],\n                    ['Unloader3', 'Sorting Machine3', 1000],\n                    ['Unloader4', 'Sorting Machine1', 1000],\n                    ['Unloader4', 'Sorting Machine2', 1000],\n                    ['Unloader4', 'Sorting Machine4', 1000],\n                    ['Unloader4', 'Sorting Machine3', 1800],\n                    ['Sorting Machine1', 'Sorting Machine5', 2000],\n                    ['Sorting Machine1', 'Sorting Machine6', 1000],\n                    ['Sorting Machine1', 'Sorting Machine7', 1000],\n                    ['Sorting Machine1', 'Sorting Machine8', 3000],\n                    ['Sorting Machine2', 'Sorting Machine7', 1000],\n                    ['Sorting Machine2', 'Sorting Machine6', 3000],\n                    ['Sorting Machine2', 'Sorting Machine5', 3000],\n                    ['Sorting Machine2', 'Sorting Machine8', 3000],\n                    ['Sorting Machine3', 'Sorting Machine5', 1000],\n                    ['Sorting Machine3', 'Sorting Machine7', 3000],\n                    ['Sorting Machine3', 'Sorting Machine6', 1000],\n                    ['Sorting Machine3', 'Sorting Machine8', 1000],\n                    ['Sorting Machine4', 'Sorting Machine8', 1000],\n                    ['Sorting Machine4', 'Sorting Machine5', 1000],\n                    ['Sorting Machine4', 'Sorting Machine6', 2000],\n                    ['Sorting Machine4', 'Sorting Machine6', 2000],\n                    ['Sorting Machine4', 'Sorting Machine7', 7000],\n                    ['Sorting Machine7', 'Loader1', 5000],\n                    ['Sorting Machine7', 'Loader2', 1000],\n                    ['Sorting Machine7', 'Loader3', 3000],\n                    ['Sorting Machine5', 'Loader4', 5000],\n                    ['Sorting Machine5', 'Loader5', 1000],\n                    ['Sorting Machine5', 'Loader6', 3000],\n                    ['Sorting Machine6', 'Loader2', 5000],\n                    ['Sorting Machine6', 'Loader3', 1000],\n                    ['Sorting Machine4', 'Loader4', 1080],\n                    ['Sorting Machine6', 'Loader4', 3000],\n                    ['Sorting Machine8', 'Loader2', 5000],\n                    ['Sorting Machine8', 'Loader4', 1000],\n                    ['Sorting Machine8', 'Loader1', 3000],\n                    \n                ],\n                type: 'sankey',\n                name: 'Sankey demo series'\n            }]\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div id=\"container\">\n                </div>\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default ChartExample;","import React from 'react';\nimport ChartExample from './chartDemo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChartExample/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}